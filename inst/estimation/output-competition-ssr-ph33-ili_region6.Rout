
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### get ssr fit -- prediction horizons 1:52
> library(lubridate)
> library(ggplot2)
> library(plyr)

Attaching package: ‘plyr’

The following object is masked from ‘package:lubridate’:

    here

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(reshape)

Attaching package: ‘reshape’

The following object is masked from ‘package:dplyr’:

    rename

The following objects are masked from ‘package:plyr’:

    rename, round_any

The following object is masked from ‘package:lubridate’:

    stamp

> library(ssrFlu)
> library(doMC)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> 
> registerDoMC(cores=3)
> 
> args <- commandArgs(trailingOnly=TRUE)
> 
> data_set <- args[1]
> prediction_horizon_limit <- as.integer(args[2])
> 
> ## load dataset
> if(identical(data_set, "ili_national")) {
+     data <- ili_national
+ } 
> if(identical(data_set, "ili_region1")) {
+     data <- ili_region1
+ } 
> if(identical(data_set, "ili_region2")) {
+     data <- ili_region2
+ } 
> if(identical(data_set, "ili_region3")) {
+     data <- ili_region3
+ } 
> if(identical(data_set, "ili_region4")) {
+     data <- ili_region4
+ } 
> if(identical(data_set, "ili_region5")) {
+     data <- ili_region5
+ } 
> if(identical(data_set, "ili_region6")) {
+     data <- ili_region6
+ } 
> if(identical(data_set, "ili_region7")) {
+     data <- ili_region7
+ } 
> if(identical(data_set, "ili_region8")) {
+     data <- ili_region8
+ } 
> if(identical(data_set, "ili_region9")) {
+     data <- ili_region9
+ } 
> if(identical(data_set, "ili_region10")) {
+     data <- ili_region10
+ } 
> 
> 
> 
> ## add log column
> data$log_total_cases <- log(data$total_cases + 1)
> 
> ## add week_start_date
> char_dates <- paste(data$year, data$week, "1")
> data$week_start_date <- as.Date(char_dates, format="%Y %W %w")
> 
> ## remove week 53s
> data <- data[-which(is.na(data$week_start_date)),]
> data <- data[262:nrow(data),]
> 
> ## add smooth log column -- or not, since it is already pretty smooth...
> sm <- loess(log_total_cases ~ as.numeric(week_start_date), data=data, span= 26 / nrow(data))
> data$smooth_log_cases <- sm$fitted
> 
> ## add time column
> data$time_ind <- seq_len(nrow(data))
> 
> ssr_control <- create_ssr_control(X_names=c("smooth_log_cases", "time_ind"),
+     y_names="total_cases",
+     time_name=NULL,
+     max_lag=list(smooth_log_cases=1,
+         time_ind=0),
+     prediction_horizons=as.integer(prediction_horizon_limit),
+     kernel_fns=list(smooth_log_cases="squared_exp_kernel",
+         time_ind="periodic_kernel"),
+     theta_est=list(smooth_log_cases="bw",
+         time_ind="bw"),
+     theta_fixed=list(time_ind=list(period=pi / 52)),
+     theta_transform_fns=list(
+         squared_exp_kernel=list(
+             bw=list(transform="log",
+                 detransform="exp")
+         ),
+         periodic_kernel=list(
+             bw=list(transform="log",
+                 detransform="exp")
+         )
+     ),
+     crossval_buffer=52,
+     loss_fn_name="mae_from_kernel_weights_and_centers",
+     loss_fn_args=list())
> 
> 
> ssr_fit <- ssr(X_names=c("smooth_log_cases", "time_ind"),
+     y_names="total_cases",
+     time_name=NULL,
+     data=data,
+     ssr_control=ssr_control)
974.4192FALSE
690.0322FALSE
966.8333FALSE
974.4262FALSE
690.0227FALSE
974.4122FALSE
690.0416FALSE
966.8189FALSE
1003.424FALSE
690.6435FALSE
1003.403FALSE
690.6855FALSE
966.8477FALSE
1003.445FALSE
690.6016FALSE
974.2194FALSE
685.7878FALSE
962.702FALSE
974.2196FALSE
685.7837FALSE
974.2192FALSE
685.7919FALSE
962.7108FALSE
974.219FALSE
689.2683FALSE
974.2193FALSE
689.3067FALSE
962.6931FALSE
974.2187FALSE
689.2306FALSE
974.2167FALSE
685.3638FALSE
961.6747FALSE
974.2172FALSE
685.3617FALSE
974.2161FALSE
685.3658FALSE
961.6722FALSE
974.1931FALSE
685.4259FALSE
974.1945FALSE
685.4316FALSE
961.6772FALSE
974.1916FALSE
685.4202FALSE
974.9424FALSE
961.5019FALSE
685.3046FALSE
974.9224FALSE
685.305FALSE
974.9625FALSE
961.5017FALSE
685.3042FALSE
974.2173FALSE
685.3011FALSE
974.2137FALSE
961.5022FALSE
685.3015FALSE
974.2209FALSE
685.3008FALSE
974.1917FALSE
961.4991FALSE
685.3482FALSE
974.1932FALSE
685.3466FALSE
974.1916FALSE
961.4988FALSE
685.3498FALSE
974.1913FALSE
961.4994FALSE
685.3003FALSE
974.1928FALSE
961.5082FALSE
685.3007FALSE
961.5087FALSE
974.1924FALSE
685.2999FALSE
974.2031FALSE
961.5076FALSE
685.33FALSE
974.1994FALSE
685.3283FALSE
974.2068FALSE
961.4963FALSE
685.3317FALSE
974.1912FALSE
685.2998FALSE
974.1927FALSE
961.496FALSE
685.3002FALSE
974.1927FALSE
685.3002FALSE
961.4966FALSE
974.2037FALSE
685.3002FALSE
974.2FALSE
961.4949FALSE
685.3006FALSE
974.2074FALSE
685.2998FALSE
974.1912FALSE
961.4946FALSE
685.2998FALSE
974.1927FALSE
685.3002FALSE
974.1927FALSE
961.4952FALSE
974.1912FALSE
685.3002FALSE
974.1927FALSE
685.2998FALSE
961.5007FALSE
974.1927FALSE
$par
smooth_log_cases_lag1.bw 
               -2.380418 

$value
[1] 974.1912

$counts
function gradient 
      15       15 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

685.3002FALSE
685.3002FALSE
961.5013FALSE
685.2998FALSE
685.3002FALSE
961.5002FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4952FALSE
685.2998FALSE
961.4948FALSE
685.3002FALSE
961.4955FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.3226FALSE
961.4943FALSE
685.3237FALSE
961.4947FALSE
685.3215FALSE
961.4947FALSE
685.3004FALSE
961.4943FALSE
685.3008FALSE
961.4947FALSE
685.3FALSE
961.4947FALSE
685.2998FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.5031FALSE
685.3002FALSE
961.5028FALSE
685.3002FALSE
685.2998FALSE
961.5033FALSE
685.3002FALSE
961.4945FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4949FALSE
685.3002FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
961.4947FALSE
685.2998FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
961.4947FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
685.3002FALSE
961.4943FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
685.2998FALSE
961.4943FALSE
685.3002FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
685.3002FALSE
961.4943FALSE
685.2998FALSE
685.3002FALSE
961.4947FALSE
685.3002FALSE
961.4947FALSE
685.2998FALSE
685.3002FALSE
961.4943FALSE
685.3002FALSE
685.2998FALSE
961.4947FALSE
685.3002FALSE
685.3002FALSE
$par
time_ind_lag0.bw 
       -1.600865 

$value
[1] 685.2998

$counts
function gradient 
      52       52 

$convergence
[1] 52

$message
[1] "ERROR: ABNORMAL_TERMINATION_IN_LNSRCH"

961.4947FALSE
961.4943FALSE
961.4947FALSE
961.4947FALSE
961.4943FALSE
961.4947FALSE
961.4947FALSE
961.4943FALSE
961.4947FALSE
961.4947FALSE
$par
smooth_log_cases_lag0.bw 
               -1.574076 

$value
[1] 961.4943

$counts
function gradient 
      46       46 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

737.4051FALSE
736.1418FALSE
737.3728FALSE
737.4376FALSE
736.1139FALSE
737.4012FALSE
736.1696FALSE
737.4091FALSE
736.1206FALSE
700.4341FALSE
736.163FALSE
700.4168FALSE
741.2572FALSE
700.4514FALSE
741.2377FALSE
700.4561FALSE
741.2767FALSE
700.4121FALSE
741.4035FALSE
688.5722FALSE
741.1109FALSE
688.5712FALSE
723.1681FALSE
688.5732FALSE
723.1312FALSE
688.5623FALSE
723.2049FALSE
688.5821FALSE
687.6784FALSE
723.199FALSE
687.6774FALSE
687.6794FALSE
723.1384FALSE
687.6723FALSE
723.3471FALSE
687.6846FALSE
723.329FALSE
686.313FALSE
723.3651FALSE
686.3121FALSE
723.4751FALSE
686.3139FALSE
723.2192FALSE
686.3088FALSE
718.4444FALSE
686.3172FALSE
718.4211FALSE
690.052FALSE
718.4677FALSE
690.0513FALSE
718.5258FALSE
690.0528FALSE
718.3631FALSE
690.0921FALSE
703.4032FALSE
690.0121FALSE
703.3872FALSE
685.7917FALSE
703.4192FALSE
685.7909FALSE
703.4507FALSE
685.7925FALSE
703.3558FALSE
685.79FALSE
690.217FALSE
685.7934FALSE
690.2106FALSE
685.7318FALSE
690.2233FALSE
685.7312FALSE
690.2274FALSE
685.7325FALSE
690.2066FALSE
685.7372FALSE
687.539FALSE
685.7269FALSE
687.5352FALSE
685.6808FALSE
687.5429FALSE
685.6801FALSE
687.5426FALSE
685.6816FALSE
687.5355FALSE
685.68FALSE
686.1418FALSE
685.6816FALSE
686.1403FALSE
685.6668FALSE
686.1433FALSE
685.6663FALSE
686.1399FALSE
685.6673FALSE
686.1437FALSE
685.6725FALSE
685.8994FALSE
685.6611FALSE
685.8985FALSE
685.6289FALSE
685.9004FALSE
685.6282FALSE
685.897FALSE
685.6295FALSE
685.9019FALSE
685.6304FALSE
688.8148FALSE
685.6273FALSE
688.8145FALSE
685.5454FALSE
688.8152FALSE
685.5449FALSE
688.8504FALSE
685.5459FALSE
688.7794FALSE
685.5469FALSE
685.6804FALSE
685.5442FALSE
685.6797FALSE
685.4044FALSE
685.6811FALSE
685.6808FALSE
685.4042FALSE
685.68FALSE
685.4046FALSE
685.4787FALSE
685.4048FALSE
685.4783FALSE
685.4039FALSE
685.479FALSE
685.3604FALSE
685.4791FALSE
685.3603FALSE
685.4783FALSE
685.3605FALSE
685.3608FALSE
685.3991FALSE
685.36FALSE
685.399FALSE
685.3256FALSE
685.3993FALSE
685.3255FALSE
685.3976FALSE
685.3256FALSE
685.4006FALSE
685.3248FALSE
685.3375FALSE
685.3374FALSE
685.3264FALSE
685.3375FALSE
685.3184FALSE
685.3379FALSE
685.3183FALSE
685.337FALSE
685.3184FALSE
685.3278FALSE
685.3188FALSE
685.3277FALSE
685.318FALSE
685.3278FALSE
685.3066FALSE
685.3282FALSE
685.3066FALSE
685.3274FALSE
685.3066FALSE
685.3119FALSE
685.307FALSE
685.3119FALSE
685.3062FALSE
685.3119FALSE
685.3123FALSE
685.3083FALSE
685.3115FALSE
685.3083FALSE
685.449FALSE
685.3083FALSE
685.449FALSE
685.3068FALSE
685.449FALSE
685.3098FALSE
685.446FALSE
685.3053FALSE
685.3053FALSE
685.4524FALSE
685.3053FALSE
685.3047FALSE
685.3084FALSE
685.3061FALSE
685.3029FALSE
685.3084FALSE
685.3029FALSE
685.3029FALSE
685.3084FALSE
685.3033FALSE
685.3088FALSE
685.3036FALSE
685.3012FALSE
685.308FALSE
685.3012FALSE
685.3012FALSE
685.3826FALSE
685.3016FALSE
685.3017FALSE
685.3826FALSE
685.3006FALSE
685.3826FALSE
685.3005FALSE
685.3006FALSE
685.3806FALSE
685.3009FALSE
685.301FALSE
685.3846FALSE
685.3002FALSE
685.3083FALSE
685.3002FALSE
685.3002FALSE
685.3083FALSE
685.3005FALSE
685.3083FALSE
685.3075FALSE
685.3006FALSE
685.3FALSE
685.3091FALSE
685.3FALSE
685.3078FALSE
685.3FALSE
685.3004FALSE
685.3078FALSE
685.3003FALSE
685.3078FALSE
685.3FALSE
685.3082FALSE
685.3FALSE
685.3075FALSE
685.3FALSE
685.362FALSE
685.3FALSE
685.362FALSE
685.3008FALSE
685.2998FALSE
685.3621FALSE
685.2998FALSE
685.2998FALSE
685.3602FALSE
685.3002FALSE
685.364FALSE
685.3005FALSE
685.3085FALSE
685.2998FALSE
685.3085FALSE
685.2998FALSE
685.3085FALSE
685.2998FALSE
685.3077FALSE
685.3002FALSE
685.3093FALSE
685.3003FALSE
685.3075FALSE
685.2998FALSE
685.3074FALSE
685.2998FALSE
685.3075FALSE
685.3078FALSE
685.2998FALSE
685.308FALSE
685.3002FALSE
685.3043FALSE
685.3005FALSE
685.3043FALSE
685.2998FALSE
685.2998FALSE
685.3043FALSE
685.2998FALSE
685.3002FALSE
685.3046FALSE
685.3005FALSE
685.3047FALSE
685.2998FALSE
685.3019FALSE
685.2998FALSE
685.3019FALSE
685.2998FALSE
685.3019FALSE
685.3002FALSE
685.3023FALSE
685.3005FALSE
685.3023FALSE
685.2998FALSE
685.3009FALSE
685.2998FALSE
685.3009FALSE
685.2998FALSE
685.3009FALSE
685.3013FALSE
685.3002FALSE
685.3005FALSE
685.3013FALSE
685.2998FALSE
685.2998FALSE
685.3003FALSE
685.2998FALSE
685.3003FALSE
685.3002FALSE
685.3003FALSE
685.3005FALSE
685.3007FALSE
685.2998FALSE
685.3007FALSE
685.2998FALSE
685.3001FALSE
685.2998FALSE
685.3001FALSE
685.3002FALSE
685.3001FALSE
685.3005FALSE
685.3005FALSE
685.2998FALSE
685.3005FALSE
685.2998FALSE
685.337FALSE
685.2998FALSE
685.337FALSE
685.3002FALSE
685.337FALSE
685.3005FALSE
685.3353FALSE
685.2998FALSE
685.3386FALSE
685.2998FALSE
685.3FALSE
685.2998FALSE
685.3FALSE
685.3002FALSE
685.3FALSE
685.3004FALSE
685.3005FALSE
685.3005FALSE
685.3001FALSE
685.2998FALSE
685.3001FALSE
685.3001FALSE
685.2998FALSE
685.3004FALSE
685.3005FALSE
685.2998FALSE
685.2999FALSE
685.2999FALSE
685.3002FALSE
685.2999FALSE
685.3003FALSE
685.3005FALSE
685.3003FALSE
685.2999FALSE
685.2998FALSE
685.2999FALSE
685.2998FALSE
685.2999FALSE
685.3003FALSE
685.2998FALSE
685.3003FALSE
685.2998FALSE
685.3002FALSE
685.2998FALSE
685.2998FALSE
685.3005FALSE
685.3002FALSE
685.3002FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.3002FALSE
685.2998FALSE
685.3002FALSE
685.2998FALSE
685.3002FALSE
685.2998FALSE
685.2998FALSE
685.3005FALSE
685.3002FALSE
685.3002FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.3002FALSE
685.2998FALSE
685.3002FALSE
685.3002FALSE
685.3468FALSE
685.3468FALSE
685.3005FALSE
685.3468FALSE
685.3452FALSE
685.2998FALSE
685.3484FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.3002FALSE
685.3002FALSE
685.3002FALSE
685.2998FALSE
685.3005FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.3002FALSE
685.2998FALSE
685.3002FALSE
$par
smooth_log_cases_lag1.bw         time_ind_lag0.bw 
                6.658915                -1.600794 

$value
[1] 685.2998

$counts
function gradient 
      42       42 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

685.3002FALSE
685.3005FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.3002FALSE
685.3005FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.3002FALSE
685.3005FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.3002FALSE
685.3005FALSE
685.2998FALSE
685.2998FALSE
685.2998FALSE
685.3002FALSE
685.3005FALSE
$par
smooth_log_cases_lag0.bw         time_ind_lag0.bw 
                5.012496                -1.601070 

$value
[1] 685.2998

$counts
function gradient 
      45       45 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

> 
> save(ssr_fit,
+     file=paste0("/home/ngr67a/2015-cdc-flu-competition/fit-competition-ssr-ph", prediction_horizon_limit, "-", data_set, ".Rdata"))
> 
> proc.time()
    user   system  elapsed 
1119.069    0.518  817.520 
