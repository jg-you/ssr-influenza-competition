
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### get ssr fit -- prediction horizons 1:52
> library(lubridate)
> library(ggplot2)
> library(plyr)

Attaching package: ‘plyr’

The following object is masked from ‘package:lubridate’:

    here

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(reshape)

Attaching package: ‘reshape’

The following object is masked from ‘package:dplyr’:

    rename

The following objects are masked from ‘package:plyr’:

    rename, round_any

The following object is masked from ‘package:lubridate’:

    stamp

> library(ssrFlu)
> library(doMC)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> 
> registerDoMC(cores=3)
> 
> args <- commandArgs(trailingOnly=TRUE)
> 
> data_set <- args[1]
> prediction_horizon_limit <- as.integer(args[2])
> 
> ## load dataset
> if(identical(data_set, "ili_national")) {
+     data <- ili_national
+ } 
> if(identical(data_set, "ili_region1")) {
+     data <- ili_region1
+ } 
> if(identical(data_set, "ili_region2")) {
+     data <- ili_region2
+ } 
> if(identical(data_set, "ili_region3")) {
+     data <- ili_region3
+ } 
> if(identical(data_set, "ili_region4")) {
+     data <- ili_region4
+ } 
> if(identical(data_set, "ili_region5")) {
+     data <- ili_region5
+ } 
> if(identical(data_set, "ili_region6")) {
+     data <- ili_region6
+ } 
> if(identical(data_set, "ili_region7")) {
+     data <- ili_region7
+ } 
> if(identical(data_set, "ili_region8")) {
+     data <- ili_region8
+ } 
> if(identical(data_set, "ili_region9")) {
+     data <- ili_region9
+ } 
> if(identical(data_set, "ili_region10")) {
+     data <- ili_region10
+ } 
> 
> 
> 
> ## add log column
> data$log_total_cases <- log(data$total_cases + 1)
> 
> ## add week_start_date
> char_dates <- paste(data$year, data$week, "1")
> data$week_start_date <- as.Date(char_dates, format="%Y %W %w")
> 
> ## remove week 53s
> data <- data[-which(is.na(data$week_start_date)),]
> data <- data[262:nrow(data),]
> 
> ## add smooth log column -- or not, since it is already pretty smooth...
> sm <- loess(log_total_cases ~ as.numeric(week_start_date), data=data, span= 26 / nrow(data))
> data$smooth_log_cases <- sm$fitted
> 
> ## add time column
> data$time_ind <- seq_len(nrow(data))
> 
> ssr_control <- create_ssr_control(X_names=c("smooth_log_cases", "time_ind"),
+     y_names="total_cases",
+     time_name=NULL,
+     max_lag=list(smooth_log_cases=1,
+         time_ind=0),
+     prediction_horizons=as.integer(prediction_horizon_limit),
+     kernel_fns=list(smooth_log_cases="squared_exp_kernel",
+         time_ind="periodic_kernel"),
+     theta_est=list(smooth_log_cases="bw",
+         time_ind="bw"),
+     theta_fixed=list(time_ind=list(period=pi / 52)),
+     theta_transform_fns=list(
+         squared_exp_kernel=list(
+             bw=list(transform="log",
+                 detransform="exp")
+         ),
+         periodic_kernel=list(
+             bw=list(transform="log",
+                 detransform="exp")
+         )
+     ),
+     crossval_buffer=52,
+     loss_fn_name="mae_from_kernel_weights_and_centers",
+     loss_fn_args=list())
> 
> 
> ssr_fit <- ssr(X_names=c("smooth_log_cases", "time_ind"),
+     y_names="total_cases",
+     time_name=NULL,
+     data=data,
+     ssr_control=ssr_control)
393.0329FALSE
398.8127FALSE
346.2592FALSE
398.7963FALSE
393.0203FALSE
346.2545FALSE
398.8291FALSE
393.0455FALSE
346.2639FALSE
392.2428FALSE
390.229FALSE
338.8608FALSE
392.2584FALSE
390.2461FALSE
338.8618FALSE
392.2271FALSE
390.212FALSE
391.1839FALSE
338.8598FALSE
388.2651FALSE
391.1735FALSE
339.7254FALSE
388.2562FALSE
391.1943FALSE
339.717FALSE
388.274FALSE
402.2702FALSE
339.7341FALSE
401.7055FALSE
402.302FALSE
338.8516FALSE
401.7409FALSE
402.2383FALSE
338.8524FALSE
401.6707FALSE
389.9308FALSE
338.8509FALSE
387.2333FALSE
389.9286FALSE
338.9138FALSE
387.2323FALSE
389.9329FALSE
338.9108FALSE
387.2342FALSE
389.9091FALSE
338.9173FALSE
387.2265FALSE
389.9102FALSE
338.8519FALSE
387.2274FALSE
389.9081FALSE
338.8511FALSE
387.2258FALSE
389.8991FALSE
338.8528FALSE
387.2239FALSE
389.8994FALSE
387.2237FALSE
338.8503FALSE
389.8989FALSE
387.2242FALSE
389.8983FALSE
338.8508FALSE
387.2233FALSE
389.8984FALSE
338.8508FALSE
387.2231FALSE
389.8981FALSE
387.2235FALSE
338.8503FALSE
389.8979FALSE
387.2277FALSE
338.8508FALSE
389.8979FALSE
387.2286FALSE
338.8508FALSE
389.8979FALSE
387.2269FALSE
338.8503FALSE
389.8979FALSE
387.2231FALSE
338.8508FALSE
389.8979FALSE
387.2232FALSE
338.8508FALSE
389.8979FALSE
$par
smooth_log_cases_lag1.bw 
               -1.590369 

$value
[1] 389.8979

$counts
function gradient 
      10       10 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

387.2233FALSE
338.8503FALSE
387.2231FALSE
338.8508FALSE
387.2233FALSE
338.8508FALSE
387.2232FALSE
338.8503FALSE
387.2231FALSE
338.8508FALSE
387.2232FALSE
338.8508FALSE
387.2232FALSE
338.8503FALSE
387.2231FALSE
338.8508FALSE
387.2232FALSE
338.8508FALSE
387.2232FALSE
$par
smooth_log_cases_lag0.bw 
               -1.660793 

$value
[1] 387.2231

$counts
function gradient 
      13       13 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
$par
time_ind_lag0.bw 
       -1.314995 

$value
[1] 338.8503

$counts
function gradient 
      22       22 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

355.5456FALSE
359.822FALSE
359.8083FALSE
355.5346FALSE
359.8357FALSE
355.5565FALSE
359.8321FALSE
355.564FALSE
355.5272FALSE
359.812FALSE
356.3879FALSE
351.616FALSE
356.3807FALSE
351.6037FALSE
356.3951FALSE
351.6283FALSE
356.3769FALSE
351.6076FALSE
356.3989FALSE
351.6244FALSE
353.452FALSE
345.5761FALSE
353.4478FALSE
345.575FALSE
353.4562FALSE
345.5772FALSE
353.446FALSE
345.5695FALSE
353.4581FALSE
345.5827FALSE
352.8317FALSE
344.0403FALSE
352.8254FALSE
352.8379FALSE
344.0392FALSE
352.8267FALSE
344.0414FALSE
352.8366FALSE
344.032FALSE
350.8401FALSE
344.0486FALSE
350.8281FALSE
342.2144FALSE
350.8521FALSE
342.2143FALSE
350.8438FALSE
342.2144FALSE
350.8364FALSE
437.253FALSE
342.2422FALSE
437.253FALSE
437.2529FALSE
342.1867FALSE
437.2531FALSE
342.2754FALSE
437.2528FALSE
342.2743FALSE
350.3045FALSE
342.2766FALSE
350.2925FALSE
342.265FALSE
350.3169FALSE
342.2858FALSE
350.33FALSE
339.3361FALSE
350.2796FALSE
339.3348FALSE
349.95FALSE
339.3373FALSE
349.9365FALSE
339.3342FALSE
349.9636FALSE
339.3384FALSE
349.9624FALSE
347.3848FALSE
349.9376FALSE
347.3862FALSE
348.4202FALSE
348.4085FALSE
347.3834FALSE
348.432FALSE
347.4336FALSE
348.4395FALSE
347.3361FALSE
348.401FALSE
339.3046FALSE
345.3711FALSE
339.3038FALSE
345.3646FALSE
339.3058FALSE
339.3061FALSE
345.3775FALSE
345.3957FALSE
339.3036FALSE
339.1877FALSE
339.6814FALSE
339.187FALSE
339.6796FALSE
339.1884FALSE
339.6833FALSE
339.1861FALSE
339.6842FALSE
339.6787FALSE
339.1893FALSE
339.3384FALSE
339.0421FALSE
339.3368FALSE
339.0416FALSE
339.3399FALSE
339.0425FALSE
339.3366FALSE
339.0404FALSE
339.3401FALSE
339.0438FALSE
339.0271FALSE
338.9219FALSE
339.0268FALSE
338.9218FALSE
339.0275FALSE
338.922FALSE
339.0244FALSE
338.923FALSE
339.0298FALSE
338.9207FALSE
338.9629FALSE
338.9011FALSE
338.9627FALSE
338.9632FALSE
338.9011FALSE
338.9612FALSE
338.9012FALSE
338.9647FALSE
338.9022FALSE
338.9638FALSE
338.9001FALSE
338.9637FALSE
338.8739FALSE
338.9638FALSE
338.8738FALSE
338.9671FALSE
338.9605FALSE
338.8739FALSE
338.9224FALSE
338.8727FALSE
338.9222FALSE
338.9226FALSE
338.8753FALSE
338.9228FALSE
338.9221FALSE
338.8666FALSE
338.9111FALSE
338.8666FALSE
338.9111FALSE
338.8666FALSE
338.9112FALSE
338.8655FALSE
338.9127FALSE
338.9098FALSE
338.8677FALSE
338.8926FALSE
338.8889FALSE
338.8925FALSE
338.8926FALSE
338.8889FALSE
338.8937FALSE
338.8889FALSE
338.8914FALSE
338.8994FALSE
338.8918FALSE
338.8994FALSE
338.8995FALSE
338.8873FALSE
338.8659FALSE
338.8976FALSE
338.8659FALSE
338.9013FALSE
338.8659FALSE
338.8746FALSE
338.8668FALSE
338.8745FALSE
338.8651FALSE
338.8746FALSE
338.8599FALSE
338.8735FALSE
338.8599FALSE
338.8761FALSE
338.8599FALSE
338.871FALSE
338.8709FALSE
338.8607FALSE
338.871FALSE
338.8591FALSE
338.8714FALSE
338.8871FALSE
338.8705FALSE
338.8871FALSE
338.8621FALSE
338.8871FALSE
338.8621FALSE
338.8848FALSE
338.8621FALSE
338.8894FALSE
338.861FALSE
338.8582FALSE
338.8632FALSE
338.8581FALSE
338.8574FALSE
338.8582FALSE
338.8574FALSE
338.8573FALSE
338.8574FALSE
338.8565FALSE
338.8593FALSE
338.8585FALSE
338.8552FALSE
338.8552FALSE
338.8534FALSE
338.8552FALSE
338.8534FALSE
338.8554FALSE
338.8534FALSE
338.8559FALSE
338.8541FALSE
338.8536FALSE
338.8538FALSE
338.8536FALSE
338.8522FALSE
338.8536FALSE
338.8522FALSE
338.8522FALSE
338.8544FALSE
338.8522FALSE
338.8532FALSE
338.8529FALSE
338.8518FALSE
338.8512FALSE
338.8518FALSE
338.8512FALSE
338.8518FALSE
338.8512FALSE
338.8524FALSE
338.8513FALSE
338.8522FALSE
338.8519FALSE
338.8511FALSE
338.8569FALSE
338.8511FALSE
338.8569FALSE
338.8511FALSE
338.8569FALSE
338.8514FALSE
338.8578FALSE
338.8517FALSE
338.856FALSE
338.8507FALSE
338.8507FALSE
338.8512FALSE
338.8507FALSE
338.8512FALSE
338.8512FALSE
338.8511FALSE
338.8519FALSE
338.8513FALSE
338.8513FALSE
338.8505FALSE
338.8508FALSE
338.8505FALSE
338.8508FALSE
338.8505FALSE
338.8508FALSE
338.851FALSE
338.8512FALSE
338.851FALSE
338.8514FALSE
338.8504FALSE
338.8506FALSE
338.8504FALSE
338.8506FALSE
338.8504FALSE
338.8506FALSE
338.8509FALSE
338.8509FALSE
338.8509FALSE
338.8512FALSE
338.8526FALSE
338.8505FALSE
338.8526FALSE
338.8505FALSE
338.8526FALSE
338.8505FALSE
338.8534FALSE
338.8509FALSE
338.8518FALSE
338.851FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8509FALSE
338.8509FALSE
338.8509FALSE
338.8504FALSE
338.8509FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8509FALSE
338.8504FALSE
338.8508FALSE
338.8509FALSE
338.8504FALSE
338.8508FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8508FALSE
338.8504FALSE
338.8508FALSE
338.8506FALSE
338.8504FALSE
338.8511FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8504FALSE
338.8508FALSE
338.8504FALSE
338.8508FALSE
338.8507FALSE
338.8503FALSE
338.8509FALSE
$par
smooth_log_cases_lag0.bw         time_ind_lag0.bw 
                4.421385                -1.315194 

$value
[1] 338.8504

$counts
function gradient 
      35       35 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8505FALSE
338.8505FALSE
338.8505FALSE
338.8504FALSE
338.8512FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
338.8503FALSE
338.8503FALSE
338.8503FALSE
338.8508FALSE
338.8508FALSE
$par
smooth_log_cases_lag1.bw         time_ind_lag0.bw 
                5.822144                -1.315037 

$value
[1] 338.8503

$counts
function gradient 
      54       54 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

> 
> save(ssr_fit,
+     file=paste0("/home/ngr67a/2015-cdc-flu-competition/fit-competition-ssr-ph", prediction_horizon_limit, "-", data_set, ".Rdata"))
> 
> proc.time()
   user  system elapsed 
754.747   0.674 900.767 
