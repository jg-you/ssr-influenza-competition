
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### get ssr fit -- prediction horizons 1:52
> library(lubridate)
> library(ggplot2)
> library(plyr)

Attaching package: ‘plyr’

The following object is masked from ‘package:lubridate’:

    here

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(reshape)

Attaching package: ‘reshape’

The following object is masked from ‘package:dplyr’:

    rename

The following objects are masked from ‘package:plyr’:

    rename, round_any

The following object is masked from ‘package:lubridate’:

    stamp

> library(ssrFlu)
> library(doMC)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> 
> registerDoMC(cores=3)
> 
> args <- commandArgs(trailingOnly=TRUE)
> 
> data_set <- args[1]
> prediction_horizon_limit <- as.integer(args[2])
> 
> ## load dataset
> if(identical(data_set, "ili_national")) {
+     data <- ili_national
+ } 
> if(identical(data_set, "ili_region1")) {
+     data <- ili_region1
+ } 
> if(identical(data_set, "ili_region2")) {
+     data <- ili_region2
+ } 
> if(identical(data_set, "ili_region3")) {
+     data <- ili_region3
+ } 
> if(identical(data_set, "ili_region4")) {
+     data <- ili_region4
+ } 
> if(identical(data_set, "ili_region5")) {
+     data <- ili_region5
+ } 
> if(identical(data_set, "ili_region6")) {
+     data <- ili_region6
+ } 
> if(identical(data_set, "ili_region7")) {
+     data <- ili_region7
+ } 
> if(identical(data_set, "ili_region8")) {
+     data <- ili_region8
+ } 
> if(identical(data_set, "ili_region9")) {
+     data <- ili_region9
+ } 
> if(identical(data_set, "ili_region10")) {
+     data <- ili_region10
+ } 
> 
> 
> 
> ## add log column
> data$log_total_cases <- log(data$total_cases + 1)
> 
> ## add week_start_date
> char_dates <- paste(data$year, data$week, "1")
> data$week_start_date <- as.Date(char_dates, format="%Y %W %w")
> 
> ## remove week 53s
> data <- data[-which(is.na(data$week_start_date)),]
> data <- data[262:nrow(data),]
> 
> ## add smooth log column -- or not, since it is already pretty smooth...
> sm <- loess(log_total_cases ~ as.numeric(week_start_date), data=data, span= 26 / nrow(data))
> data$smooth_log_cases <- sm$fitted
> 
> ## add time column
> data$time_ind <- seq_len(nrow(data))
> 
> ssr_control <- create_ssr_control(X_names=c("smooth_log_cases", "time_ind"),
+     y_names="total_cases",
+     time_name=NULL,
+     max_lag=list(smooth_log_cases=1,
+         time_ind=0),
+     prediction_horizons=as.integer(prediction_horizon_limit),
+     kernel_fns=list(smooth_log_cases="squared_exp_kernel",
+         time_ind="periodic_kernel"),
+     theta_est=list(smooth_log_cases="bw",
+         time_ind="bw"),
+     theta_fixed=list(time_ind=list(period=pi / 52)),
+     theta_transform_fns=list(
+         squared_exp_kernel=list(
+             bw=list(transform="log",
+                 detransform="exp")
+         ),
+         periodic_kernel=list(
+             bw=list(transform="log",
+                 detransform="exp")
+         )
+     ),
+     crossval_buffer=52,
+     loss_fn_name="mae_from_kernel_weights_and_centers",
+     loss_fn_args=list())
> 
> 
> ssr_fit <- ssr(X_names=c("smooth_log_cases", "time_ind"),
+     y_names="total_cases",
+     time_name=NULL,
+     data=data,
+     ssr_control=ssr_control)
620.0994FALSE
623.8881FALSE
462.9682FALSE
620.0695FALSE
623.8647FALSE
462.9675FALSE
620.1293FALSE
462.9688FALSE
623.9115FALSE
613.6333FALSE
468.3784FALSE
618.1463FALSE
613.6515FALSE
468.4137FALSE
613.6151FALSE
618.1613FALSE
468.3431FALSE
610.1754FALSE
618.1312FALSE
610.1743FALSE
462.539FALSE
616.4912FALSE
610.1765FALSE
462.5387FALSE
616.487FALSE
610.1522FALSE
462.5393FALSE
616.4953FALSE
610.1512FALSE
616.3096FALSE
462.6588FALSE
616.3087FALSE
610.1532FALSE
462.6608FALSE
616.3104FALSE
610.2827FALSE
462.6568FALSE
616.295FALSE
610.2862FALSE
462.5004FALSE
616.2952FALSE
610.2792FALSE
462.4995FALSE
610.1564FALSE
616.2949FALSE
462.5013FALSE
610.1571FALSE
616.295FALSE
462.4833FALSE
610.1557FALSE
616.2946FALSE
462.4834FALSE
610.1513FALSE
616.2955FALSE
462.4833FALSE
610.1504FALSE
616.2949FALSE
462.4838FALSE
610.1523FALSE
616.295FALSE
462.4836FALSE
610.1519FALSE
616.2947FALSE
610.1526FALSE
462.4841FALSE
616.2946FALSE
462.4833FALSE
610.1513FALSE
616.2948FALSE
610.1505FALSE
462.4834FALSE
616.2948FALSE
610.1507FALSE
462.4833FALSE
616.2947FALSE
610.1503FALSE
462.4833FALSE
616.2948FALSE
610.152FALSE
462.4833FALSE
616.2948FALSE
610.151FALSE
462.4833FALSE
616.2946FALSE
610.1531FALSE
462.4833FALSE
616.2948FALSE
610.1504FALSE
462.4833FALSE
616.2948FALSE
610.1505FALSE
462.4835FALSE
616.2946FALSE
610.1502FALSE
462.4833FALSE
616.2948FALSE
610.1509FALSE
616.2948FALSE
462.4833FALSE
610.1501FALSE
616.2946FALSE
462.4833FALSE
610.1519FALSE
616.2948FALSE
462.4833FALSE
610.1503FALSE
616.2948FALSE
462.4833FALSE
610.1504FALSE
616.2946FALSE
462.4834FALSE
610.1504FALSE
616.2948FALSE
610.1502FALSE
462.4833FALSE
616.2948FALSE
462.4833FALSE
610.1504FALSE
616.2946FALSE
462.4833FALSE
610.1505FALSE
616.2948FALSE
462.4833FALSE
610.1503FALSE
616.2948FALSE
462.4833FALSE
610.1504FALSE
616.2946FALSE
610.1504FALSE
462.4833FALSE
616.2948FALSE
610.1503FALSE
462.4833FALSE
462.4833FALSE
610.1504FALSE
616.2948FALSE
462.4833FALSE
$par
time_ind_lag0.bw 
       -1.916787 

$value
[1] 462.4833

$counts
function gradient 
      15       15 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2957FALSE
610.1504FALSE
616.2959FALSE
610.1503FALSE
616.2955FALSE
610.1504FALSE
616.2947FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2948FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1504FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
616.2948FALSE
610.1504FALSE
610.1503FALSE
616.2946FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2946FALSE
610.1503FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
610.1503FALSE
616.2946FALSE
610.1504FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
616.2946FALSE
610.1503FALSE
616.2948FALSE
610.1504FALSE
616.2948FALSE
$par
smooth_log_cases_lag0.bw 
               -1.588843 

$value
[1] 616.2946

$counts
function gradient 
      48       48 

$convergence
[1] 52

$message
[1] "ERROR: ABNORMAL_TERMINATION_IN_LNSRCH"

610.1504FALSE
610.1503FALSE
610.1504FALSE
610.1504FALSE
610.1503FALSE
610.1504FALSE
610.1504FALSE
610.1503FALSE
610.1504FALSE
610.1504FALSE
610.1503FALSE
610.1504FALSE
610.1504FALSE
610.1503FALSE
610.1504FALSE
610.1504FALSE
610.1503FALSE
610.1504FALSE
610.1504FALSE
$par
smooth_log_cases_lag1.bw 
               -1.656138 

$value
[1] 610.1503

$counts
function gradient 
      55       55 

$convergence
[1] 52

$message
[1] "ERROR: ABNORMAL_TERMINATION_IN_LNSRCH"

496.0326FALSE
496.227FALSE
496.2129FALSE
496.0189FALSE
496.0462FALSE
496.241FALSE
496.031FALSE
496.2314FALSE
496.2226FALSE
496.0341FALSE
468.1743FALSE
470.2589FALSE
468.1542FALSE
470.2372FALSE
468.1944FALSE
470.2806FALSE
468.1812FALSE
470.2757FALSE
468.1673FALSE
470.2422FALSE
464.8845FALSE
467.0523FALSE
464.8845FALSE
467.0523FALSE
464.8845FALSE
467.0523FALSE
464.8794FALSE
467.0776FALSE
464.8896FALSE
467.0271FALSE
462.8243FALSE
463.6321FALSE
462.8243FALSE
463.6321FALSE
462.8243FALSE
463.6321FALSE
462.8224FALSE
463.6307FALSE
462.8262FALSE
463.6335FALSE
464.6116FALSE
463.548FALSE
464.6115FALSE
463.548FALSE
464.6116FALSE
463.548FALSE
464.6247FALSE
463.547FALSE
464.5984FALSE
463.549FALSE
462.5062FALSE
463.3134FALSE
462.5062FALSE
463.3134FALSE
462.5062FALSE
463.3134FALSE
462.5054FALSE
463.3123FALSE
462.507FALSE
463.3145FALSE
462.6302FALSE
462.576FALSE
462.6302FALSE
462.576FALSE
462.6302FALSE
462.576FALSE
462.6319FALSE
462.5778FALSE
462.6285FALSE
462.5742FALSE
462.4856FALSE
463.0083FALSE
462.4856FALSE
463.0083FALSE
462.4856FALSE
463.0083FALSE
463.0078FALSE
462.4854FALSE
463.0087FALSE
462.4858FALSE
462.4901FALSE
462.4857FALSE
462.4901FALSE
462.4857FALSE
462.4901FALSE
462.4857FALSE
462.4907FALSE
462.4863FALSE
462.4896FALSE
462.485FALSE
462.4851FALSE
462.7554FALSE
462.485FALSE
462.7554FALSE
462.4851FALSE
462.7554FALSE
462.4851FALSE
462.7532FALSE
462.485FALSE
462.7576FALSE
462.4862FALSE
462.485FALSE
462.4862FALSE
462.485FALSE
462.4862FALSE
462.4851FALSE
462.4861FALSE
462.485FALSE
462.4866FALSE
462.485FALSE
465.0046FALSE
462.485FALSE
465.0046FALSE
462.485FALSE
465.0046FALSE
462.485FALSE
465.0204FALSE
462.485FALSE
464.9889FALSE
462.487FALSE
462.485FALSE
462.487FALSE
462.485FALSE
462.487FALSE
462.485FALSE
462.4876FALSE
462.485FALSE
462.4864FALSE
462.485FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4846FALSE
462.4834FALSE
462.4846FALSE
462.4834FALSE
462.4846FALSE
462.4834FALSE
462.4847FALSE
462.4835FALSE
462.4849FALSE
462.4835FALSE
462.4848FALSE
462.4835FALSE
462.4834FALSE
462.4848FALSE
462.4838FALSE
462.4848FALSE
462.4834FALSE
462.4848FALSE
462.4834FALSE
462.4834FALSE
462.4848FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4834FALSE
462.4849FALSE
462.4835FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4848FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4848FALSE
462.4834FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4848FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4849FALSE
462.4834FALSE
462.4847FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
462.4847FALSE
462.4834FALSE
$par
smooth_log_cases_lag0.bw         time_ind_lag0.bw 
                3.432760                -1.916761 

$value
[1] 462.4834

$counts
function gradient 
      30       30 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.5429FALSE
462.5429FALSE
462.5429FALSE
462.544FALSE
462.5419FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4848FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4848FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4847FALSE
462.4849FALSE
$par
smooth_log_cases_lag1.bw         time_ind_lag0.bw 
                2.901267                -1.917199 

$value
[1] 462.4847

$counts
function gradient 
      54       54 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

> 
> save(ssr_fit,
+     file=paste0("/home/ngr67a/2015-cdc-flu-competition/fit-competition-ssr-ph", prediction_horizon_limit, "-", data_set, ".Rdata"))
> 
> proc.time()
    user   system  elapsed 
1258.632    0.980 1073.182 
