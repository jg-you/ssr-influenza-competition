
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### get ssr fit -- prediction horizons 1:52
> library(lubridate)
> library(ggplot2)
> library(plyr)

Attaching package: ‘plyr’

The following object is masked from ‘package:lubridate’:

    here

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(reshape)

Attaching package: ‘reshape’

The following object is masked from ‘package:dplyr’:

    rename

The following objects are masked from ‘package:plyr’:

    rename, round_any

The following object is masked from ‘package:lubridate’:

    stamp

> library(ssrFlu)
> library(doMC)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> 
> registerDoMC(cores=3)
> 
> args <- commandArgs(trailingOnly=TRUE)
> 
> data_set <- args[1]
> prediction_horizon_limit <- as.integer(args[2])
> 
> ## load dataset
> if(identical(data_set, "ili_national")) {
+     data <- ili_national
+ } 
> if(identical(data_set, "ili_region1")) {
+     data <- ili_region1
+ } 
> if(identical(data_set, "ili_region2")) {
+     data <- ili_region2
+ } 
> if(identical(data_set, "ili_region3")) {
+     data <- ili_region3
+ } 
> if(identical(data_set, "ili_region4")) {
+     data <- ili_region4
+ } 
> if(identical(data_set, "ili_region5")) {
+     data <- ili_region5
+ } 
> if(identical(data_set, "ili_region6")) {
+     data <- ili_region6
+ } 
> if(identical(data_set, "ili_region7")) {
+     data <- ili_region7
+ } 
> if(identical(data_set, "ili_region8")) {
+     data <- ili_region8
+ } 
> if(identical(data_set, "ili_region9")) {
+     data <- ili_region9
+ } 
> if(identical(data_set, "ili_region10")) {
+     data <- ili_region10
+ } 
> 
> 
> 
> ## add log column
> data$log_total_cases <- log(data$total_cases + 1)
> 
> ## add week_start_date
> char_dates <- paste(data$year, data$week, "1")
> data$week_start_date <- as.Date(char_dates, format="%Y %W %w")
> 
> ## remove week 53s
> data <- data[-which(is.na(data$week_start_date)),]
> data <- data[262:nrow(data),]
> 
> ## add smooth log column -- or not, since it is already pretty smooth...
> sm <- loess(log_total_cases ~ as.numeric(week_start_date), data=data, span= 26 / nrow(data))
> data$smooth_log_cases <- sm$fitted
> 
> ## add time column
> data$time_ind <- seq_len(nrow(data))
> 
> ssr_control <- create_ssr_control(X_names=c("smooth_log_cases", "time_ind"),
+     y_names="total_cases",
+     time_name=NULL,
+     max_lag=list(smooth_log_cases=1,
+         time_ind=0),
+     prediction_horizons=as.integer(prediction_horizon_limit),
+     kernel_fns=list(smooth_log_cases="squared_exp_kernel",
+         time_ind="periodic_kernel"),
+     theta_est=list(smooth_log_cases="bw",
+         time_ind="bw"),
+     theta_fixed=list(time_ind=list(period=pi / 52)),
+     theta_transform_fns=list(
+         squared_exp_kernel=list(
+             bw=list(transform="log",
+                 detransform="exp")
+         ),
+         periodic_kernel=list(
+             bw=list(transform="log",
+                 detransform="exp")
+         )
+     ),
+     crossval_buffer=52,
+     loss_fn_name="mae_from_kernel_weights_and_centers",
+     loss_fn_args=list())
> 
> 
> ssr_fit <- ssr(X_names=c("smooth_log_cases", "time_ind"),
+     y_names="total_cases",
+     time_name=NULL,
+     data=data,
+     ssr_control=ssr_control)
879.0736FALSE
878.3616FALSE
698.706FALSE
879.0469FALSE
698.6949FALSE
878.3604FALSE
879.1011FALSE
698.7172FALSE
878.3627FALSE
881.0735FALSE
698.3971FALSE
884.5052FALSE
881.1039FALSE
698.4422FALSE
884.5368FALSE
881.043FALSE
698.3519FALSE
884.4736FALSE
872.1984FALSE
696.5394FALSE
877.0215FALSE
872.1993FALSE
696.53FALSE
877.0151FALSE
696.5488FALSE
877.0278FALSE
872.1976FALSE
876.4075FALSE
718.5031FALSE
872.1914FALSE
876.4078FALSE
718.6534FALSE
872.1915FALSE
876.408FALSE
718.3563FALSE
872.1912FALSE
876.4359FALSE
693.7289FALSE
872.1911FALSE
876.4376FALSE
693.7224FALSE
876.4343FALSE
872.1912FALSE
693.7354FALSE
876.4079FALSE
872.1912FALSE
735.3738FALSE
876.4082FALSE
872.1911FALSE
735.5798FALSE
876.4076FALSE
735.1679FALSE
872.1912FALSE
876.4076FALSE
693.0376FALSE
872.1912FALSE
$par
smooth_log_cases_lag0.bw 
               -1.857189 

$value
[1] 872.1911

$counts
function gradient 
       6        6 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

693.0359FALSE
876.4078FALSE
693.0393FALSE
876.4079FALSE
876.4075FALSE
693.1093FALSE
876.4078FALSE
693.1118FALSE
876.408FALSE
693.1069FALSE
876.4075FALSE
693.0331FALSE
876.4078FALSE
693.0335FALSE
876.408FALSE
693.0327FALSE
876.4075FALSE
693.0324FALSE
876.4078FALSE
693.0327FALSE
876.408FALSE
693.0326FALSE
876.4075FALSE
693.0323FALSE
876.4078FALSE
693.0326FALSE
876.408FALSE
693.0328FALSE
876.4075FALSE
693.0323FALSE
876.4078FALSE
693.0327FALSE
693.0327FALSE
876.408FALSE
693.0323FALSE
876.4075FALSE
693.0327FALSE
876.4078FALSE
693.0327FALSE
693.0323FALSE
876.408FALSE
693.0327FALSE
876.4075FALSE
693.0327FALSE
876.4078FALSE
693.0323FALSE
693.0327FALSE
876.408FALSE
693.0327FALSE
876.4075FALSE
693.0323FALSE
876.4078FALSE
693.0327FALSE
693.0327FALSE
876.408FALSE
693.0323FALSE
876.4075FALSE
693.0327FALSE
876.4078FALSE
693.0327FALSE
876.408FALSE
693.0323FALSE
876.4075FALSE
693.0327FALSE
876.4078FALSE
693.0327FALSE
876.408FALSE
693.0323FALSE
876.4075FALSE
876.4078FALSE
693.0327FALSE
876.408FALSE
693.0327FALSE
876.4075FALSE
876.4078FALSE
693.0323FALSE
876.408FALSE
693.0327FALSE
876.4075FALSE
693.0327FALSE
876.4078FALSE
876.408FALSE
693.0323FALSE
876.4075FALSE
693.0327FALSE
876.4078FALSE
693.0327FALSE
876.408FALSE
876.4075FALSE
693.0323FALSE
876.4078FALSE
693.0327FALSE
876.408FALSE
693.0327FALSE
876.4075FALSE
693.0323FALSE
876.4078FALSE
693.0327FALSE
876.408FALSE
$par
smooth_log_cases_lag1.bw 
               -1.864167 

$value
[1] 876.4075

$counts
function gradient 
      23       23 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

693.0327FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
$par
time_ind_lag0.bw 
       -1.594979 

$value
[1] 693.0323

$counts
function gradient 
      30       30 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

748.1033FALSE
743.6344FALSE
748.0427FALSE
743.5839FALSE
748.164FALSE
743.685FALSE
748.1613FALSE
748.0454FALSE
743.6917FALSE
708.8513FALSE
743.5773FALSE
708.8411FALSE
712.3621FALSE
708.8616FALSE
712.3329FALSE
708.8406FALSE
708.8621FALSE
712.3913FALSE
706.5834FALSE
712.3577FALSE
706.5724FALSE
706.5942FALSE
712.3665FALSE
703.8978FALSE
706.5771FALSE
706.5898FALSE
703.8901FALSE
697.013FALSE
703.9056FALSE
697.0075FALSE
703.887FALSE
697.0185FALSE
703.9085FALSE
697.0293FALSE
701.3415FALSE
696.9968FALSE
701.3419FALSE
696.3744FALSE
701.3411FALSE
696.3698FALSE
696.379FALSE
701.3299FALSE
696.3757FALSE
701.353FALSE
696.3736FALSE
698.0995FALSE
694.8664FALSE
698.0982FALSE
694.8633FALSE
698.1006FALSE
694.8695FALSE
698.0953FALSE
694.8688FALSE
698.1036FALSE
694.864FALSE
697.953FALSE
693.5063FALSE
697.9475FALSE
693.5054FALSE
697.9584FALSE
693.5072FALSE
697.9652FALSE
693.5084FALSE
697.9408FALSE
693.5047FALSE
697.58FALSE
693.2913FALSE
697.5778FALSE
693.2908FALSE
693.2918FALSE
697.5821FALSE
693.2919FALSE
697.5793FALSE
693.2907FALSE
697.5806FALSE
693.1584FALSE
697.24FALSE
693.1581FALSE
697.2353FALSE
693.1586FALSE
697.2446FALSE
693.1589FALSE
697.2453FALSE
693.1579FALSE
697.2347FALSE
693.0927FALSE
696.959FALSE
693.0926FALSE
696.9536FALSE
693.0928FALSE
696.9643FALSE
693.0931FALSE
696.9741FALSE
693.0923FALSE
696.9442FALSE
698.0174FALSE
695.8624FALSE
695.8579FALSE
698.0173FALSE
695.8668FALSE
698.0175FALSE
695.8708FALSE
698.0061FALSE
695.8539FALSE
698.0286FALSE
693.1021FALSE
694.6591FALSE
693.102FALSE
694.6589FALSE
693.1022FALSE
694.6594FALSE
693.1002FALSE
694.6804FALSE
693.1044FALSE
694.6379FALSE
693.0922FALSE
693.2745FALSE
693.0921FALSE
693.2742FALSE
693.0923FALSE
693.2747FALSE
693.0924FALSE
693.2779FALSE
693.0927FALSE
693.2711FALSE
693.0631FALSE
693.1877FALSE
693.0631FALSE
693.1875FALSE
693.0632FALSE
693.1879FALSE
693.0635FALSE
693.1902FALSE
693.0629FALSE
693.0472FALSE
693.1852FALSE
693.0471FALSE
693.1496FALSE
693.0472FALSE
693.1495FALSE
693.0474FALSE
693.1497FALSE
693.1464FALSE
693.0476FALSE
693.1528FALSE
693.04FALSE
693.0922FALSE
693.04FALSE
693.0921FALSE
693.04FALSE
693.0923FALSE
693.0404FALSE
693.0926FALSE
693.0918FALSE
693.0399FALSE
693.0854FALSE
693.0359FALSE
693.0853FALSE
693.0359FALSE
693.0855FALSE
693.0359FALSE
693.085FALSE
693.0362FALSE
693.086FALSE
693.0364FALSE
693.0778FALSE
693.0342FALSE
693.0777FALSE
693.0342FALSE
693.0779FALSE
693.0342FALSE
693.0761FALSE
693.0346FALSE
693.0795FALSE
693.0345FALSE
693.0525FALSE
693.0354FALSE
693.0524FALSE
693.0354FALSE
693.0525FALSE
693.0354FALSE
693.052FALSE
693.0349FALSE
693.0359FALSE
693.0529FALSE
693.0342FALSE
693.0437FALSE
693.0342FALSE
693.0437FALSE
693.0342FALSE
693.0437FALSE
693.0337FALSE
693.0346FALSE
693.0432FALSE
693.0331FALSE
693.0442FALSE
693.0331FALSE
693.0384FALSE
693.0331FALSE
693.0384FALSE
693.0334FALSE
693.0384FALSE
693.0336FALSE
693.0391FALSE
693.0327FALSE
693.038FALSE
693.0327FALSE
693.0369FALSE
693.0327FALSE
693.0369FALSE
693.0331FALSE
693.0369FALSE
693.033FALSE
693.0325FALSE
693.0373FALSE
693.0325FALSE
693.0365FALSE
693.0325FALSE
693.0358FALSE
693.0329FALSE
693.0358FALSE
693.0329FALSE
693.0358FALSE
693.0324FALSE
693.0353FALSE
693.0324FALSE
693.0363FALSE
693.0324FALSE
693.0328FALSE
693.0342FALSE
693.0328FALSE
693.0342FALSE
693.0323FALSE
693.0342FALSE
693.0323FALSE
693.0337FALSE
693.0323FALSE
693.0346FALSE
693.0327FALSE
693.0397FALSE
693.0328FALSE
693.0397FALSE
693.0323FALSE
693.0323FALSE
693.0397FALSE
693.0323FALSE
693.0411FALSE
693.0327FALSE
693.0383FALSE
693.0327FALSE
693.0337FALSE
693.0323FALSE
693.0337FALSE
693.0323FALSE
693.0337FALSE
693.0323FALSE
693.034FALSE
693.0327FALSE
693.0333FALSE
693.0327FALSE
$par
smooth_log_cases_lag1.bw         time_ind_lag0.bw 
                5.731390                -1.594997 

$value
[1] 693.0323

$counts
function gradient 
      27       27 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

693.0333FALSE
693.0333FALSE
693.0333FALSE
693.0332FALSE
693.0338FALSE
693.0328FALSE
693.0328FALSE
693.0328FALSE
693.0331FALSE
693.0332FALSE
693.0326FALSE
693.0326FALSE
693.0326FALSE
693.033FALSE
693.0329FALSE
693.0325FALSE
693.0324FALSE
693.0325FALSE
693.0328FALSE
693.0328FALSE
693.0324FALSE
693.0324FALSE
693.0324FALSE
693.0327FALSE
693.0328FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0473FALSE
693.0473FALSE
693.0473FALSE
693.0487FALSE
693.0458FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0336FALSE
693.0336FALSE
693.0336FALSE
693.034FALSE
693.0333FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
693.0323FALSE
693.0323FALSE
693.0323FALSE
693.0327FALSE
693.0327FALSE
$par
smooth_log_cases_lag0.bw         time_ind_lag0.bw 
                5.878434                -1.594987 

$value
[1] 693.0323

$counts
function gradient 
      66       66 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

> 
> save(ssr_fit,
+     file=paste0("/home/ngr67a/2015-cdc-flu-competition/fit-competition-ssr-ph", prediction_horizon_limit, "-", data_set, ".Rdata"))
> 
> proc.time()
    user   system  elapsed 
 715.736    0.815 1089.600 
